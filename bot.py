import os
import openai
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from threading import Thread

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com

if not TOKEN or not OPENAI_API_KEY or not WEBHOOK_URL:
    logger.error("–ü—Ä–æ–≤–µ—Ä—å TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∏ WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

openai.api_key = OPENAI_API_KEY

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = ApplicationBuilder().token(TOKEN).build()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return

    user_msg = update.message.text
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_msg}")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": user_msg}]
        )
        bot_reply = response.choices[0].message["content"]
        await update.message.reply_text(bot_reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT üò¢")

# --- –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# --- –†–æ—É—Ç—ã Flask ---
@flask_app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update_json = request.get_json(force=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram: {update_json}")
        update = Update.de_json(update_json, application.bot)
        asyncio.create_task(application.process_update(update))  # ‚úÖ –ö–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        return "ok"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return "error", 500

# --- –ó–∞–ø—É—Å–∫ Telegram –∏ Flask ---
async def run_bot():
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL + "/webhook")
    await application.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def start_flask():
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    flask_app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    Thread(target=lambda: asyncio.run(run_bot())).start()
    start_flask()
